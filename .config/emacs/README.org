#+TITLE: Emacs-config
#+AUTHOR: Miró Lieberman Allard
#+PROPERTY: header-args :tangle init.el
#+STARTUP: overview

* TODO Introduction

Detta är min Emacs-konfiguration. Här tänker jag såsmåningon berättar lite om "filosofin" som står bakom den. Med en lista? Typ:

- Använd inbyggda komponenter
- Vad är extensible på svenska? För det vill jag ha här.
  
* Startup
** Lexical binding
Use lexical-binding.
#+begin_src elisp
;;; init.el --- -*- lexical-binding: t -*-
#+end_src
** Defer Garbage Collection
This post-pones garbage collection, increasing start-up time.
#+begin_src elisp
  (setq gc-cons-threshold 100000000)
#+end_src
** Disable ~package-enable-at-startup~
We hadle package initialization, so we must prevent Emacs from doing
it early.
#+begin_src elisp
  (setq package-enable-at-startup nil)
#+end_src
** Unset ~file-name-handler-alist~
Emacs doesn't need this during startup.
#+begin_src elisp
  (defvar file-name-handler-alist-original file-name-handler-alist)
  (setq file-name-handler-alist nil)
#+end_src
** Disable ~site-run-file~
#+begin_src elisp
  (setq site-run-file nil)
#+end_src
** Compile all elisp
#+begin_src elisp
  (setq comp-deferred-compilation t)
#+end_src
** Cleanup Interface
It's faster to disable them here, before they've been initialized.
#+begin_src elisp
  (menu-bar-mode -1)
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
#+end_src
* Garbage Collection
** Set ~gc-cons-threshold~ Smaller for Interactive Use
#+begin_src elisp
  (defvar better-gc-cons-threshold 134217728 ; 128mb
    "The default value to use for `gc-cons-threshold'.

  If you experience freezing, decrease this.  If you experience stuttering, increase this.")

  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (setq gc-cons-threshold better-gc-cons-threshold)
	      (setq file-name-handler-alist file-name-handler-alist-original)
	      (makunbound 'file-name-handler-alist-original)))
#+end_src
Collect garbage when Emacs is out of focus, and avoid collecting
whilst using the minibuffer.
#+begin_src elisp
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (if (boundp 'after-focus-change-function)
		  (add-function :after after-focus-change-function
				(lambda ()
				  (unless (frame-focus-state)
				    (garbage-collect))))
		(add-hook 'after-focus-change-function 'garbage-collect))
	      (defun gc-minibuffer-setup-hook ()
		(setq gc-cons-threshold (* better-gc-cons-threshold 2)))

	      (defun gc-minibuffer-exit-hook ()
		(garbage-collect)
		(setq gc-cons-threshold better-gc-cons-threshold))

	      (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
	      (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)))
#+end_src

**  ~gcmh~
Not sure what this does, or if it helps
#+begin_src elisp
  (use-package gcmh
    :config (gcmh-mode))		; gör allt snabbare?
#+end_src
* Package Managument
** Melpa

#+begin_src elisp
  (require 'package)
  ;; Select the folder to store packages
  ;; Comment / Uncomment to use desired sites
  (setq package-user-dir (expand-file-name "elpa" user-emacs-directory)
	package-archives
	'(("gnu"   . "https://elpa.gnu.org/packages/")
	  ("melpa" . "https://melpa.org/packages/")
	  ("nongnu" . "https://elpa.nongnu.org/nongnu/")
	  ("cselpa" . "https://elpa.thecybershadow.net/packages/")
	  ;; ("melpa-cn" . "http://mirrors.cloud.tencent.com/elpa/melpa/")
	  ;; ("gnu-cn"   . "http://mirrors.cloud.tencent.com/elpa/gnu/")
	  ))
#+end_src
** Configure Package Manager
#+begin_src elisp
  (unless (bound-and-true-p package--initialized)
    (setq package-enable-at-startup nil)          ; To prevent initializing twice
    (package-initialize))

  ;; set use-package-verbose to t for interpreted .emacs,
  ;; and to nil for byte-compiled .emacs.elc.
  (eval-and-compile
    (setq use-package-verbose (not (bound-and-true-p byte-compile-current-file))))
#+end_src
** ~use-package~
#+begin_src elisp
  (if (version< emacs-version "29")
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-and-compile
    (setq use-package-always-ensure t
	  use-package-enable-imenu-support t
	  use-package-expand-minimally t))

  (eval-when-compile
    (require 'use-package)
    (require 'bind-key)))
#+end_src
** Update Packages Automatically
This updates packages if at least ~auto-package-update-interval~ days
have passed.
#+begin_src elisp
  (use-package auto-package-update
    :if (not (daemonp))
    :custom
    (auto-package-update-interval 7) ;; in days
    (auto-package-update-prompt-before-update t)
    (auto-package-update-delete-old-versions t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe))
#+end_src
* Global Configuration
** Bindings
#+begin_src elisp
  ;; Unbind unneeded keys
  (global-set-key (kbd "C-z") nil)
  (global-set-key (kbd "M-z") nil)
  (global-set-key (kbd "C-x C-z") nil)
  ;; Truncate lines
  (global-set-key (kbd "C-x C-l") #'toggle-truncate-lines)
  ;; Move up/down paragraph
  (global-set-key (kbd "M-n") #'forward-paragraph)
  (global-set-key (kbd "M-p") #'backward-paragraph)
#+end_src

* Options
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
  (setq echo-keystrokes 0.01)		; Instant keystroke echoes
  (blink-cursor-mode -1) ; don't blink cursor
  (setq completion-ignore-case t)
  (setq read-file-name-completion-ignore-case 't); Ignore case when completing file names
  (recentf-mode 1) ; recent files
  (savehist-mode 1) ; save minibuffer prompt history
  (save-place-mode 1) ; remember last place in file

  (setq mouse-yank-at-point t)
  (context-menu-mode)

  ;; casing dwim
  (global-set-key (kbd "M-u") 'upcase-dwim)
  (global-set-key (kbd "M-l") 'downcase-dwim)
  (global-set-key (kbd "M-c") 'capitalize-dwim)

  ;; some rebinds
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-x C-k") 'kill-this-buffer)

  (setq view-read-only t)			; set view mode in read only buffers

  (add-hook 'text-mode-hook 'auto-fill-mode)

  ;; Auto reread from disk if underlying file changes
  (setq auto-revert-interval 3)
  (setq auto-revert-check-vc-info t)
  (global-auto-revert-mode 1) ; update buffer on change
  (setq global-auto-revert-non-file-buffers t) ; update dired on file add

  ;; Mode line
  (setq line-number-mode t)
  (setq column-number-modte t)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'subword-mode) ; camelCase as separate words

  (add-hook 'after-save-hook		; files that start with `#!' executable
	    'executable-make-buffer-file-executable-if-script-p)

  ;; mkdir -p before filesave
  (add-hook 'before-save-hook
	    (lambda ()
	      (when buffer-file-name
		(let ((dir (file-name-directory buffer-file-name)))
		  (when (and (not (file-exists-p dir))
			     (y-or-n-p (format "Directory %s does not exist. Create it?" dir)))
		    (make-directory dir t))))))

  (setq require-final-newline t)

  ;; Modes to highlight the current line with
  ;; (let ((hl-line-hooks '(text-mode-hook prog-mode-hook)))
  ;;   (mapc (lambda (hook) (add-hook hook 'hl-line-mode)) hl-line-hooks))

  (setq x-underline-at-descent-line nil)           ; Prettier underlines
  (setq switch-to-buffer-obey-display-actions t)   ; Make switching buffers more consistent

  (setq-default show-trailing-whitespace nil)      ; By default, don't underline trailing spaces

  (global-font-lock-mode 1)
  (column-number-mode 1)

  (global-so-long-mode 1)

  ;; (electric-pair-mode 1)
  (setq show-paren-delay 0.0)
  (show-paren-mode 1)

  (global-prettify-symbols-mode 1)

  (tooltip-mode -1)
  (setq tooltip-use-echo-area t)

  ;; don't bloat handcrafted init.el
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)

  ;; Better backup files
  (setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
   '(("." . "~/.local/share/emacs/file-backups/"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups
#+end_src
** Lokalisation
#+begin_src emacs-lisp
  (setq european-calendar-style 't)              ; European style calendar
  (setq calendar-week-start-day 1)               ; Week starts monday
  (setq ps-paper-type 'a4)                       ; Specify printing format
  (setq ispell-dictionary "svenska")             ; Set ispell dictionary
  (setq shell-file-name "/bin/zsh")             ; Set Shell for M-| command
  (setq tex-shell-file-name "/bin/zsh")         ; Set Shell used by TeX
  (setq grep-command "grep -i -nH -e ")          ; Set grep command options
  (setq exec-path (append exec-path '("/bin")))  ; Change binary path
#+end_src
** Flyspell
#+begin_src elisp
  (add-hook 'org-mode-hook (lambda () (flyspell-mode)))
  (add-hook 'text-mode-hook (lambda () (flyspell-mode)))
  (add-hook 'prog-mode-hook (lambda () (flyspell-prog-mode)))

  (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
    (add-hook hook (lambda () (flyspell-mode -1))))

  ;; Better mouse support
  (eval-after-load "flyspell"
    '(progn
       (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
       (define-key flyspell-mouse-map [mouse-3] #'undefined)))
#+end_src

** isearch
#+begin_src elisp
  (setq search-whitespace-regexp ".*") 	; replace space with wildcard
  (setq isearch-lax-whitespace t)		; allow multiple spaces
  (setq isearch-regexp-lax-whitespace nil) ; but require only one?
  (setq isearch-lazy-count 1)
#+end_src

* Crux
This package provides a collection of useful procedures.
#+begin_src elisp
  (use-package crux
    :bind
    (("C-a" . crux-move-beginning-of-line)
     ("C-x 4 t" . crux-transpose-windows)
     ("C-x K" . crux-kill-other-buffers)
     ("C-k" . crux-smart-kill-line))
    :config
    (crux-with-region-or-buffer indent-region)
    (crux-with-region-or-buffer untabify)
    (crux-with-region-or-point-to-eol kill-ring-save)
    (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer))
#+end_src

* Dired
/The/ directory editor.
#+begin_src elisp
  (use-package dired
    :ensure nil
    :bind
    (("C-x C-j" . dired-jump))
    :custom
    (dired-listing-switches "-lah --group-directories-first")
    ;; Delete and copy recursively
    (dired-recursive-deletes 'always)
    (dired-recursive-copies 'always)
    ;; Auto-refresh, quietly
    (global-auto-revert-non-file-buffers t)
    (auto-revert-verbose nil)
    ;; Copy to other window, if present
    (dired-dwim-target t)
    ;; Move files to trash when deleting
    (delete-by-moving-to-trash t)
    ;; Load newest version of a file
    (load-prefer-newer t)
    ;; Detect external file changes, and auto refresh
    (auto-revert-use-notify nil)
    (auto-revert-interval 3) 		; Do it every 3 sec
    :config
    ;; Enable global auto-revert
    (global-auto-revert-mode)
    ;; Reuse same Dired buffer
    (put 'dired-find-alternate-file 'disabled nil)
    :hook
    (dired-mode . (lambda ()
		    (local-set-key (kbd "<mouse-2>") #'dired-find-alternate-file)
		    (local-set-key (kbd "RET") #'dired-find-alternate-file)
		    (local-set-key (kbd "^")
				   (lambda () (interactive) (find-alternate-file "..")))))
    (dired-mode . dired-hide-details-mode)
    (dired-mode . dired-omit-mode)
    )
#+end_src
** Icons in dired
#+begin_src elisp
    (use-package all-the-icons-dired
      :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src
** Subtree
#+begin_src elisp
  (use-package dired-subtree
    :bind (:map dired-mode-map
                ("<tab>" . dired-subtree-toggle)))
#+end_src

* Ibuffer
Let's you operate on buffers as if they were files in Dired. It uses
IBuffer VC to group buffers by git project.
#+begin_src elisp
  (use-package ibuffer
    :ensure nil
    :bind ("C-x C-b" . ibuffer)
    :init
    (use-package ibuffer-vc
      :commands (ibuffer-vc-set-filter-groups-by-vc-root)
      :custom
      (ibuffer-vc-skip-if-remote 'nil))
    :custom
    (ibuffer-formats
     '((mark modified read-only locked " "
	     (name 35 35 :left :elide)
	     " "
	     (size 9 -1 :right)
	     " "
	     (mode 16 16 :left :elide)
	     " " filename-and-process)
       (mark " "
	     (name 16 -1)
	     " " filename))))
#+end_src

* Scrolling

Att scrolla är så fult, av någon anledning. Gör det bättre.

#+begin_src emacs-lisp
  (mouse-wheel-mode 1)
  (pixel-scroll-mode 1)
  (if (>= emacs-major-version 29)
      (pixel-scroll-precision-mode 1))
  (setq pixel-scroll-precision-use-momentum t)
  (setq pixel-scroll-precision-momentum-min-velocity 10.0)
  (setq pixel-scroll-precision-momentum-seconds 0.4)
  (setq pixel-scroll-precision-momentum-tick 0.005)
  (setq pixel-scroll-precision-large-scroll-height 40.0) ; smooth scroll with mouse


  (setq redisplay-dont-pause t
	scroll-margin 1
	scroll-step 1
	scroll-conservatively 101
	scroll-up-aggressively 0.01
	scroll-down-aggressively 0.01
	fast-but-imprecise-scrolling nil
	mouse-wheel-scroll-amount '(1 ((shift) . 1))
	scroll-preserve-screen-position 1)

  (setq auto-window-vscroll nil)

  ;; Horizontal
  (setq hscroll-step 1)
  (setq hscroll-margin 1)
#+end_src
* Window Movement
#+begin_src elisp
  (global-set-key (kbd "M-o") 'other-window)
#+end_src
* Repeat Mode
[[https://karthinks.com/software/it-bears-repeating/][It bears repeating: Emacs 28 & repeat mode]]
#+begin_src elisp
  (repeat-mode 1)

  ;; Link navigation
  (defvar org-link-repeat-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "n") 'org-next-link)
      (define-key map (kbd "p") 'org-previous-link)
      map))

  (dolist (cmd '(org-next-link org-previous-link))
    (put cmd 'repeat-map 'org-link-repeat-map))
#+end_src
** Transient Repeat
This fuctionality comes from [[https://karthinks.com/software/persistent-prefix-keymaps-in-emacs/][an article]] by Karthinks. It allows
pressing ~C-h~ after any prefix key (like ~C-c @~), upon which it enters a
repeat state and a ~which-key~ prompt.
#+begin_src elisp
(defun repeated-prefix-help-command ()
  (interactive)
  (when-let* ((keys (this-command-keys-vector))
              (prefix (seq-take keys (1- (length keys))))
              (orig-keymap (key-binding prefix 'accept-default))
              (keymap (copy-keymap orig-keymap))
              (exit-func (set-transient-map keymap t #'which-key-abort)))
    (define-key keymap [remap keyboard-quit]
      (lambda () (interactive) (funcall exit-func)))
    (which-key--create-buffer-and-show nil keymap)))

(setq prefix-help-command #'repeated-prefix-help-command)
#+end_src
* Pager

This code is taken from [[https://karthinks.com/software/more-less-emacs/][Karthink]].

#+begin_src elisp
  (defvar-local hide-cursor--original nil)

  (define-minor-mode hide-cursor-mode
    "Hide or show the cursor.

    When the cursor is hidden 'scroll-loc-mode is enabled, so that
    the buffer works like a pager."
    :global nil
    :lighter "H"
    (if hide-cursor-mode
        (progn
          (scroll-lock-mode 1)
          (setq-local hide-cursor--original
                      cursor-type)
          (setq-local cursor-type nil))
      (scroll-lock-mode -1)
      (setq-local cursor-type (or hide-cursor--original
                                  t))))

  (define-key global-map (kbd "<f7>") 'hide-cursor-mode)
#+end_src
* Org
** Basic settings

#+begin_src emacs-lisp
  (use-package org)

  (setq org-directory "~/Sync/Org")

  (setq org-agenda-files '("inbox.org"
			   "gtd.org"
			   "tickler.org"
			   "habits.org"))
  ;; Default tags
  (setq org-tag-alist '(;; locale
			(:startgroup)
			("home" . ?h)
			("school" . ?s)
			(:endgroup)
			(:newline)
			;; scale
			(:startgroup)
			("one-shot" . ?o)
			("project" . ?j)
			("tiny" . ?t)
			(:endgroup)
			;; misc
			("meta")
			("review")
			("reading")))

  (setq org-refile-targets '(("gtd.org" :maxlevel . 3)
			     ("someday.org" :maxlevel . 1)
			     ("tickler.org" :maxlevel . 2)))
  (setq org-outline-pant-complete-in-steps nil)
  (setq org-refile-use-outline-path 'file)

  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w@/!)" "|" "DONE(d!)" "CANCELLED(c@)")))

  (global-set-key (kbd "C-c c") 'org-capture)

  (setq org-capture-templates
	'(("t" "Todo" entry (file+headline "~/Sync/Org/inbox.org" "Tasks")
	   "* TODO %?\n %i\n %a")
	  ("s" "Slipbox" entry (file "/home/majje/Sync/Roam/inbox.org")
	   "* %?\n")))

  (global-set-key (kbd "C-c l") #'org-store-link)
  (global-set-key (kbd "C-c a") #'org-agenda)

  ;; Make org-open-at-point follow file links in the same window
  (setf (cdr (assoc 'file org-link-frame-setup)) 'find-file)

  ;; Make exporting quotes better
  (setq org-export-with-smart-quotes t)

  (setq org-agenda-hide-tags-regexp ".") ; remove tags from agenda
  (setq org-agenda-prefix-format ; and category display
	'((agenda . " %i %-12:c%?-12t% s")
	  (todo   . " ")
	  (tags   . " %i %-12:c")
	  (search . " %i %-12:c")))

  ;; org-startup-indented t ruins styling from org-modern
  ;; Improve org mode looks
  (setq
   ;; org-hide-leading-stars t
   org-startup-with-inline-images t
   org-return-follows-link t
   org-startup-with-latex-preview t
   org-mouse-1-follows-link t
   org-link-descriptive t
   org-image-actual-width '(300))

  (setq org-display-remote-inline-images 'download)

  (setq org-default-notes-file (concat org-directory "/inbox.org"))

  ;; Add org modules
  (add-to-list 'org-modules 'org-habit)
  (setq org-log-into-drawer t)		; log into LOGBOOK drawer

  ;; Increase line spacing
  (setq-default line-spacing nil)		; This will introduce gaps when used with org-modern-indent-mode

  (add-hook 'org-mode-hook 'visual-line-mode)

  (require 'org-protocol)
#+end_src


Open org-capture from anywhere:

#+begin_src elisp
  (defadvice org-switch-to-buffer-other-window
      (after supress-window-splitting activate)
    "Delete the extra window if we're in a capture frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-other-windows)))

  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame"
    (when (and (equal "capture" (frame-parameter nil 'name))
               (not (eq this-command 'org-capture-refile)))
      (delete-frame)))

  (defadvice org-capture-refile
      (after delete-capture-frame activate)
    "Advise org-refile to close the frame"
    (delete-frame))

  (defun activate-capture-frame ()
    "run org-capture in capture frame"
    (select-frame-by-name "capture")
    (switch-to-buffer (get-buffer-create "*scratch*"))
    (org-capture))
  #+end_src

** babel
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

*** Templates
#+begin_src emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("sp" . "src python"))
  (add-to-list 'org-structure-template-alist
               '("sh" . "src racket"))
  (add-to-list 'org-structure-template-alist
               '("sl" . "src elisp"))
#+end_src
*** Languages
#+begin_src elisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (scheme . t)
     (python . t)))
#+end_src

** Tables

Använd ~valign~ för finare tabeller.
#+begin_src elisp
  (use-package valign
    :config (setq valign-fancy-bar t)
    :hook (org-mode . valign-mode))
#+end_src


** Image Handling
#+begin_src emacs-lisp
  (use-package org-download
    :custom
    (org-download-method 'directory)
    (org-download-image-dir (concat "img/" (format-time-string "%Y") "/"))
    (org-download-image-org-width 600)
    (org-download-heading-lvl 1)
    :hook (dired-mode . org-download-enable))
#+end_src

** Pretty!

Bättre ~hide-emphasis-markers~!

#+begin_src emacs-lisp
  (use-package org-appear
    :hook (org-mode . org-appear-mode))  
#+end_src
** Org-modern
~org-modern~ fixar massor fina saker, som
- Symboler ist. för stjärnor innan rubriker
- TODO-nyckelord i en liten ruta
- Blocks som är finare
- Finare punkter i punktlista

#+begin_src emacs-lisp
  (use-package org-modern
    :config
    (setq org-modern-block-fringe 6)
    (global-org-modern-mode))

  ;; Add frame borders and window dividers
  (modify-all-frames-parameters
   '((right-divider-width . 0)
     (internal-border-width . 0)))
  (dolist (face '(window-divider
		  window-divider-first-pixel
		  window-divider-last-pixel))
    (face-spec-reset-face face)
    (set-face-foreground face (face-attribute 'default :background)))
  (set-face-background 'fringe (face-attribute 'default :background))

  (setq
   ;; Edit settings
   org-auto-align-tags nil
   org-tags-column 0
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t

   ;; Org styling, hide markup etc.
   org-hide-emphasis-markers t
   org-ellipsis "…"

   ;; Agenda styling
   org-agenda-tags-column 0
   org-agenda-block-separator ?─)
#+end_src

*** Org-modern-indent
~org-modern~ stylizes blocks, but this styling doesn't work in
~org-indent-mode~ or something like Olivetti. Another package,
~org-modern-indent~, solves this.

The compromise is that you have to set ~line-spacing~
to nil.
#+begin_src elisp
  (use-package org-modern-indent
    :load-path "~/.config/emacs/elpa/org-modern-indent"
    :hook
    (org-mode . org-modern-indent-mode))
#+end_src

** LaTeX Integration

*** Font Customization
This loads a font that better matches the one I use in Emacs.
#+begin_src emacs-lisp
  (plist-put org-format-latex-options :scale 0.6)
  (setq org-latex-packages-alist '(("" "arev" t)))
#+end_src

Lägg till skräddarsydda definitioner som ~floor~

#+begin_src elisp
  (setq org-latex-classes
        '(("article"
           " \\documentclass[11pt]{article}"
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
           ("\\paragraph{%s}" . "\\paragraph*{%s}")
           ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))

          ("report" "\\documentclass[11pt]{report}"
           ("\\part{%s}" . "\\part*{%s}")
           ("\\chapter{%s}" . "\\chapter*{%s}")
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))

          ("book" "\\documentclass[11pt]{book}"
           ("\\part{%s}" . "\\part*{%s}")
           ("\\chapter{%s}" . "\\chapter*{%s}")
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))

#+end_src

*** Tables
Use Booktabs.
#+begin_src elisp
  (setq org-latex-tables-booktabs t
	org-latex-reference-command "\\cref{%s}")
#+end_src
*** Fragtog
This won't be needed with Org-mode 9.7, as the reimplementation of
LaTeX preview generation integrates this feature.
#+begin_src emacs-lisp
  (use-package org-fragtog
    :hook (org-mode . org-fragtog-mode))
#+end_src

** Org-roam

#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory (file-truename "~/Sync/Roam"))
    (org-roam-dailies-directory "journals/")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("m" "main" plain "%?"
	:if-new (file+head "main/%<%Y%m%d%H%M%S>-${slug}.org"
			   "#+title: ${title}\n")
	:immediate-finish t
	:unnarrowed t)
       ("r" "reference" plain "%?"
	:if-new
	(file+head "reference/%<%Y%m%d%H%M%S>-${slug}.org"
		   ":PROPERTIES:\n:ROAM_REFS: ${citekey}\n:END:\n#+title: ${title}\n")
	:immediate-finish t
	:unnarrowed t)
       ("a" "article" plain "%?"
	:if-new
	(file+head "articles/${title}.org"
		   "#+title: ${title}\n#+filetags: :article:\n")
	:immediate-finish t
	:unnarrowed t)))

    (org-roam-dailies-capture-templates
     '(("d" "default" entry "* %<%I:%M%p>: %?"
	:if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))

    ;; Default to marking as draft
    :hook (org-roam-capture-new-node . (lambda () (org-roam-tag-add '("draft"))))

    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n g" . org-roam-graph)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n c" . org-roam-capture)
	   ("C-c n a")
	   ;; Dailies
	   ("C-c n j" . org-roam-dailies-capture-today)
	   :map org-mode-map
	   ("C-M-I" . completion-at-point)
	   ;; Dailies
	   :map org-roam-dailies-map
	   ("Y" . org-roam-dailies-capture-yesterday)
	   ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)

    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    ;; Help keep the `org-roam-buffer', toggled via `org-roam-buffer-toggle', sticky.
    (add-to-list 'display-buffer-alist
		 '("\\*org-roam\\*"
		   (display-buffer-in-side-window)
		   (side . right)
		   (slot . 0)
		   (window-width . 0.4)
		   (window-height . fit-window-to-buffer)
		   (window-parameters . ((no-other-window . t)
					 (no-delete-other-windows . t)))))

    ;; Show type in completion
    (cl-defmethod org-roam-node-type ((node org-roam-node))
      "Return the TYPE of NODE."
      (condition-case nil
	  (file-name-nondirectory
	   (directory-file-name
	    (file-name-directory
	     (file-relative-name (org-roam-node-file node) org-roam-directory))))
	(error "")))
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    ;; (require 'org-roam-protocol))
    (org-roam-db-autosync-mode))
#+end_src

*** Org-roam-ui

#+begin_src emacs-lisp
  (use-package org-roam-ui
    :after org-roam
    :custom
    (org-roam-ui-follow t)
    (org-roam-ui-update-on-save t)
    (org-roam-ui-open-on-start t)
    :init (when (featurep 'xwidget-internal)
	    (setq org-roam-ui-browser-function #'xwidget-webkit-browse-url)))
#+end_src

** Anki

#+begin_src elisp
  (use-package org-anki
    :custom
    (org-anki-default-deck "🗣 Lingvistik")
    (org-anki-default-note-type "Grundläggande"))
#+end_src

** Presentations
#+begin_src elisp
  (use-package org-present
    :hook
    (org-present-mode . (lambda () (org-present-big)
			  (setq header-line-format " ")
			  (org-present-hide-cursor)
			  (toggle-frame-fullscreen)))
    (org-present-mode-quit . (lambda () (org-present-small)
			       (setq header-line-format nil)
			       (org-present-show-cursor)
			       (toggle-frame-fullscreen)))
    :bind
    ("<f12>" . (lambda () (interactive) (if (bound-and-true-p org-present-mode) (org-present-quit) (org-present)))))
#+end_src

* TODO PDF

Jag använder så klart ~pdf-tools~, men vet inte rikigt varför än. Till skillnad från vanliga ~doc-view~ erbjuder detta
- Skarpa pdf:er, inte dåliga bilder
- Kontinuerligt skrollande?
- Möjlighet att rita på dem?

Jag måste fixa [0/2]
- [ ] kontinuerlig skroll
- [ ] mergea från upstream i egen fork
  
#+begin_src emacs-lisp
  (use-package pdf-tools
    :mode
    (("\\.pdf$" . pdf-view-mode))

    :custom
    (pdf-annot-activate-created-annotations t)
    (pdf-view-resize-factor 1.1)

    :bind
    (:map pdf-view-mode-map
	  ;; normal isearch
	  ;; custom keys 
	  ("h" . pdf-annot-activate-created-annotations)
	  ("t" . pdf-annot-add-text-annotation)
	  ("D" . pdf-annot-delete))

    :hook
    (pdf-view-mode . (lambda () (cua-mode 0)))
    (pdf-view-mode . pdf-view-themed-minor-mode)

    :config
    (pdf-tools-install)
    (auto-revert-mode)

    (setq-default pdf-view-display-size 'fit-page))
#+end_src


##+begin_src emacs-lisp
  (use-package image-roll
    :straight `(image-roll
                :type git :host github
                :repo "dalanicolai/image-roll.el"))
#+end_src

** TODO ~org-noter~
Detta är för att lätt kunna föra anteckningar till pdf:er. Anteckningarna är separata, i en org-fil, men platsen till vilken de refererar i pdf:en sparas. Känns rätt coolt och användbart.

#+begin_src emacs-lisp
  (use-package org-noter
    :after org
    :config (setq org-noter-default-notes-file-names '("notes.org")
                  org-noter-notes-search-path '("~/Nextcloud/Org/dokument-anteckningar")
                  org-noter-separate-notes-from-heading t))
#+end_src

** pdfgrep
#+begin_src elisp
  (use-package pdfgrep
    :config
    (pdfgrep-mode))
#+end_src

* LaTeX
#+begin_src elisp
  (use-package tex
    :ensure auctex
    :defer t
    :custom
    (TeX-auto-save t)
    (TeX-parse-self t)
    (TeX-master nil)
    (TeX-view-program-selection '((output-pdf "pdf-tools"))
				TeX-source-correlate-start-server t)
    (TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))
    (TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
    (TeX-electric-sub-and-superscript t)
    (TeX-electric-math '("\\(" . "\\)"))
    :hook
    (LaTeX-mode . (lambda ()
		    (turn-on-reftex)
		    (setq reftex-plug-into-AUCTeX t)
		    (reftex-isearch-minor-mode)
		    (setq TeX-PDF-mode t)
		    (setq TeX-source-correlate-method 'syrctex)
		    (setq TeX-source-correlate-start-server t))))
#+end_src

* Bibliography
** Org-cite

#+begin_src elisp
  (require 'oc)
  (setq org-cite-global-bibliography '("/home/majje/Sync/references.bib"))
  (setq org-cite-export-processors
	'((md . (csl "chicago-fullnote-bibliography.csl"))   ; Footnote reliant
	  ;; (latex . biblatex)                                 ; For humanities
	  (odt . (csl "chicago-fullnote-bibliography.csl"))  ; Footnote reliant
	  (t . (csl "modern-language-association.csl"))      ; Fallback
	  ))
  ;; (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
#+end_src
** Citar

#+begin_src elisp
  (use-package citar
    :custom
    (citar-bibliography org-cite-global-bibliography)
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    ;; icons
    (citar-symbols
     `((file ,(all-the-icons-faicon "file-o" :face 'all-the-icons-green :v-adjust -0.1) . " ")
       (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . " ")
       (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . " ")))
    (citar-at-point-function 'embark-act)
    (citar-symbol-separator "  ")
    :hook
    (LaTeX-mode . citar-capf-setup)
    (org-mode . citar-capf-setup)
    :bind
    (("C-x c c" . citar-open)
     ("C-x c n" . citar-open-notes)
     ("C-x c r")
     (:map org-mode-map :package org ("C-c b" . #'org-cite-insert))
     :map minibuffer-local-map))
#+end_src

*** citar-embark

#+begin_src elisp
  (use-package citar-embark
    :after citar embark
    :no-require
    :config (citar-embark-mode))
#+end_src

*** citar-org-roam

#+begin_src elisp
  (use-package citar-org-roam
    :after (citar org-roam)
    :no-require
    :custom
    (citar-org-roam-capture-template-key "r")
    :config (citar-org-roam-mode))
#+end_src


** Ebib – manage BibTeX files

#+begin_src elisp
  (use-package ebib)
#+end_src

** Zotero Integration

#+begin_src elisp
  (add-to-list 'load-path "~/.config/emacs/elpa/zotra")
  (require 'zotra)
  (setq zotra-cli-command '("node" "/home/majje/Projekt/zotra-cli/bin/index.js"))
  (setq zotra-default-bibliography "~/Sync/references.bib")
#+end_src

* Appearance
** General
#+begin_src elisp
  (fringe-mode '(12 . 12))
#+end_src

** Theme

I nuläget anväder jag de inbyggda Modus-temana. Jag måste dock fixa
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (require-theme 'modus-themes)
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-italic-constructs t
	  modus-themes-bold-constructs t ; bold for syntax hl
	  modus-themes-links '(neutral-underline)
	  modus-themes-hl-line '(accented)
	  modus-themes-org-blocks '(tinted-background)
	  modus-themes-variable-pitch-ui t
	  modus-themes-region '(bg-only no-extend))

    ;; Org-mode headings
    (setq modus-themes-headings
	  '((1 . (regular rainbow 1.3))
	    (2 . (regular rainbow 1.2))
	    (3 . (regular rainbow 1.1))
	    (t . (bold 1.0))))

    ;; Important!
    (setq modus-themes-scale-headings t)

    ;; Overrides
    (setq modus-themes-common-palette-overrides

	  ;; Make line numbers less intense
	  '((fg-line-number-inactive "gray50")
	    (fg-line-number-active fg-main)
	    (bg-line-number-inactive unspecified)
	    (bg-line-number-active unspecified)

	    ;; Make the fringe invisible
	    (fringe unspecified)

	    ;; mode-line
	    (border-mode-line-active border) ; bg-mode-line-active
	    (border-mode-line-inactive bg-mode-line-active) ; bg-mode-line-inactive
	    ))

    ;; Make thu background less intensive
    (setq modus-operandi-palette-overrides
	  '((bg-main "#fcfcfc")))
    (setq modus-vivendi-palette-overrides
	  '((bg-main "#262626")))

    (load-theme 'modus-operandi)
    )
 #+end_src

- [ ] snyggare rubriker (koden är nu kommenterade)
*** COMMENT ef-themes
#+begin_src emacs-lisp
  (use-package ef-themes)

  ;; If you like two specific themes and want to switch between them, you
  ;; can specify them in `ef-themes-to-toggle' and then invoke the command
  ;; `ef-themes-toggle'.  All the themes are included in the variable
  ;; `ef-themes-collection'.
  (setq ef-themes-to-toggle '(ef-duo-light ef-autumn))
  (global-set-key (kbd "<f5>") #'ef-themes-toggle)

  ;; Make customisations that affect Emacs faces BEFORE loading a theme
  ;; (any change needs a theme re-load to take effect).

  (setq ef-themes-headings ; read the manual's entry or the doc string
        '((0 . (variable-pitch light 1.4))
          (1 . (variable-pitch light 1.3))
          (2 . (variable-pitch regular 1.2))
          (3 . (variable-pitch regular 1.1))
          (t . (variable-pitch 1.0)))) ; absence of weight means `bold'

  ;; They are nil by default...
  (setq ef-themes-mixed-fonts t
        ef-themes-variable-pitch-ui t)

  ;; Disable all other themes to avoid awkward blending:
  (mapc #'disable-theme custom-enabled-themes)

  ;; Load the theme of choice:
  (load-theme 'ef-summer :no-confirm)

  ;; OR use this to load the theme which also calls `ef-themes-post-load-hook':
  (ef-themes-select 'ef-summer)

  ;; The themes we provide are recorded in the `ef-themes-dark-themes',
  ;; `ef-themes-light-themes'.

  ;; We also provide these commands, but do not assign them to any key:
  ;;
  ;; - `ef-themes-toggle'
  ;; - `ef-themes-select'
  ;; - `ef-themes-load-random'
  ;; - `ef-themes-preview-colors'
  ;; - `ef-themes-preview-colors-current'

#+end_src

** Auto-dark
Thanks to @telenieko on Reddit
#+begin_src emacs-lisp
  (use-package dbus)
  (defun mf/set-theme-from-dbus-value (value)
    "Set the appropiate theme according to the color-scheme setting value."
    (message "value is %s" value)
    (if (equal value '1)
        (progn (message "Switch to dark theme")
               (load-theme 'modus-vivendi))
      (progn (message "Switch to light theme")
             (load-theme 'modus-operandi))))

  (defun mf/color-scheme-changed (path var value)
    "DBus handler to detect when the color-scheme has changed."
    (when (and (string-equal path "org.freedesktop.appearance")
               (string-equal var "color-scheme"))
      (mf/set-theme-from-dbus-value (car value))
      ))

  ;; Register for future changes
  (dbus-register-signal
   :session "org.freedesktop.portal.Desktop"
   "/org/freedesktop/portal/desktop" "org.freedesktop.portal.Settings"
   "SettingChanged"
   #'mf/color-scheme-changed)

  ;; Request the current color-scheme
  (dbus-call-method-asynchronously
   :session "org.freedesktop.portal.Desktop"
   "/org/freedesktop/portal/desktop" "org.freedesktop.portal.Settings"
   "Read"
   (lambda (value) (mf/set-theme-from-dbus-value (caar value)))
   "org.freedesktop.appearance"
   "color-scheme"
   )
#+end_src

** ~all-the-icons~

Add icon support. ~all-the-icons-completion~ enables them in the minibuffer.

#+begin_src emacs-lisp
  (use-package all-the-icons
    :demand t
    :if (display-graphic-p))
#+end_src

** Fonts

Right now, I'm using [[https://github.com/protesilaos/iosevka-comfy][Iosevka Comfy]] by Prot.

#+begin_src emacs-lisp
  ;; Iosevka
  ;; (set-face-attribute 'default nil :family "Iosevka" :height 110)
  ;; (set-face-attribute 'fixed-pitch nil :family "Iosevka")
  ;; (set-face-attribute 'variable-pitch nil :family "Iosevka Aile")

  ;; Iosevka Comfy
  (set-face-attribute 'default nil :family "Iosevka Comfy" :height 112)
  (set-face-attribute 'fixed-pitch nil :family "Iosevka Comfy")
  (set-face-attribute 'variable-pitch nil :family "Iosevka Comfy Motion Duo")

  ;; Operator
  ;; (set-face-attribute 'default nil :family "Operator Mono" :height 110 :weight 'semilight)
  ;; (set-face-attribute 'fixed-pitch nil :family "Operator Mono")
  ;; (set-face-attribute 'bold nil :family "Operator Mono" :weight 'regular)
  ;; (set-face-attribute 'variable-pitch nil :family "Lato" :height 112 :weight 'regular)

  ;; Pragmata
  ;; (set-face-attribute 'default nil :family "Pragmata Pro" :height 112)
  ;; (set-face-attribute 'fixed-pitch nil :family "Pragmata Pro")
  ;; (set-face-attribute 'variable-pitch nil :family "Lato" :height 112)
#+end_src

*** Ligature support

#+begin_src elisp
  (use-package ligature
    :load-path "elpa/ligature"
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Iosevka ligatures in programming modes
    (ligature-set-ligatures
     'prog-mode
     '("<--" "<---" "<<-" "<-" "<->" "->" "->>" "-->" "--->"
       "<!--" "-<<" "-<" "-<-" "->-" ">-" ">>-" "<-->" "<--->"
       "<---->" "<==" "<===" "<<=" "<=" "<=>" "=>" "=>>" "==>"
       "===>" "<!---" "=<<" "=<" "=<=" "=>=" ">=" ">>=" "<==>"
       "<===>" "<====>" "<-------" "------->" "<======>" "<~~"
       "<~" "~>" "~~>" "\\/" "/\\" "==" "!=" "/=" "~=" "<>"
       "===" "!==" "=/=" "=!=" ":=" ":-" ":+" "<*" "<*>" "*>"
       "<|" "<|>" "|>" "+:" "-:" "=:" "::" ":::" "<." "<.>"
       ".>" "(*" "*)" ":>" "++" "+++" "|-" "-|"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src

*** Mixed Pitch
#+begin_src elisp
      (use-package mixed-pitch
        :hook
        (text-mode . mixed-pitch-mode)
        (info-mode . mixed-pitch-mode)
        (help-mode . mixed-pitch-mode))
#+end_src

** Mode Line
#+begin_src emacs-lisp
  (use-package minions
    :custom
    (minions-mode-line-lighter " ≡ ")
    (minions-mode-line-delimiters nil)
    :config (minions-mode))
#+end_src

** Prettify Symbols
#+begin_src elisp
  (global-prettify-symbols-mode 1)
  (defun add-pretty-lambda ()
    (setq prettify-symbols-alist
	  '(("lambda" . 955)
	    ("delta" . 120517)
	    ("epsilon" . 120518)
	    ("->" . 8594)
	    ("<=" . 8804)
	    (">=" . 8805))))
  (add-hook 'prog-mode-hook 'add-pretty-lambda)
  (add-hook 'org-mode-hook 'add-pretty-lambda)
#+end_src

** Title Bar
#+begin_src elisp
  (setq frame-title-format "%b")		; Simplify frame title
#+end_src

** Olivetti

This is achieved with olivetti

#+begin_src emacs-lisp
  ;; Distraction-free screen
  (use-package olivetti
    :init
    (setq olivetti-body-width nil
	  olivetti-style 'fancy)
    :hook
    (text-mode . (lambda () (interactive) (unless (string= (buffer-name) "*Meow Cheatsheet*") (olivetti-mode))))
    (info-mode . olivetti-mode)
    (help-mode . olivetti-mode)
    :config
    (defun distraction-free ()
      "Distraction-free writing environment"
      (interactive)
      (if (equal olivetti-mode nil)
	  (progn
	    (window-configuration-to-register 1)
	    (delete-other-windows)
	    ;; (text-scale-increase 1)
	    (olivetti-mode t))
	(progn
	  (jump-to-register 1)
	  (olivetti-mode 0))))
    ;; (text-scale-decrease 1))))
    :bind
    (("<f9>" . distraction-free)))
#+end_src

** Simplify Yes/No Prompts
#+begin_src elisp
    (setq use-short-answers t)
  (setq use-dialog-box nil)
#+end_src

** Disable Splash Screen
#+begin_src elisp
(setq inhibit-startup-screen t)
(setq initial-major-mode 'org-mode)
(setq initial-scratch-message "")
#+end_src

* TODO Completion
** Vertico

#+begin_src elisp
  (use-package vertico
    :custom
    ;; (vertico-count 13) ; Number of candidates to display
    ;; (vertico-resize t)
    ;; (vertico-cycle nil) ; Go from last to first candidate and first to last (cycle)?
    (vertico-scroll-margin 3)
    (setq vertico-multiform-categories
          '(consult-grel buffer))
    :init
    (vertico-mode))

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)
#+end_src

** Marginalia

#+begin_src emacs-lisp
  (use-package marginalia
    :bind (:map minibuffer-local-map
		("M-A" . marginalia-cycle))
    :init (marginalia-mode))
#+end_src

** ~all-the-icons-completion~

#+begin_src elisp
  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init (all-the-icons-completion-mode))
#+end_src

** Corfu

#+begin_src elisp
  (use-package corfu
    :custom
    (corfu-scroll-margin 3)
    (corfu-cycle nil)
    (corfu-quit-at-boundary 'separator)
    :bind (:map corfu-map
		("M-SPC" . corfu-insert-separator)
		("RET" . nil) ; Don't use enter
		("M-m" . corfu-move-to-minibuffer))
    :config
    (corfu-popupinfo-mode)
    (corfu-history-mode)
    :init
    (global-corfu-mode))
#+end_src

Cycle when are there only matches.
#+begin_src elisp
  (use-package emacs
    :init
    (setq comletion-cycle-threshold 3))
#+end_src

Completion in minibuffer, so long as it doesn't interfere Vertico:
#+begin_src elisp
  (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico/Mct are not active."
    (unless (or (bound-and-true-p mct--active)
		(bound-and-true-p vertico--input)
		(eq (current-local-map) read-passwd-map))
      ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion
      (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
		  corfu-popupinfo-delay nil)
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)
#+end_src

Completion in eshell:
#+begin_src elisp
    (add-hook 'eshell-mode-hook
	      (lambda ()
		(setq-local corfu-auto nil)
		(corfu-mode)))

    (use-package eshell
      :bind (("C-r" . consult-history)))
#+end_src

… and avoid having to press ~RET~ twice
#+begin_src elisp
  (defun corfu-send-shell (&rest _)
    "Send completion candidate when inside comint/eshell."
    (cond
     ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))
      (eshell-send-input))
     ((and (derived-mode-p 'comint-mode)  (fboundp 'comint-send-input))
      (comint-send-input))))

  (advice-add #'corfu-insert :after #'corfu-send-shell)
#+end_src

Send completion options to minibuffer
#+begin_src elisp
  (defun corfu-move-to-minibuffer ()
    (interactive)
    (let ((completion-extra-properties corfu--extra)
	  completion-cycle-threshold completion-cycling)
      (apply #'consult-completion-in-region completion-in-region--data)))
#+end_src

*** COMMENT ~corfu-popupinfo~

#+begin_src elisp
  (use-package corfu-popupinfo
    :after corfu
    :hook (corfu-mode . corfu-popupinfo-mode)
    :custom
    (corfu-popupinfo-delay '(0.25 . 0.1))
    (corfu-popupinfo-hide nil)
    :config
    (corfu-poupuinfo-mode))
#+end_src

*** COMMENT ~corfu-terminal~ (doesn't exist)

I don't use Emacs in the terminal, but when I do...

#+begin_src elisp
  (use-package corfu-terminal
    :if (not (display-graphic-p))
    :config
    (corfu-terminal-mode))
#+end_src

*** ~kind-icon~

#+begin_src elisp
  (use-package kind-icon
    ;; :if (display-graphic-p) ; ruins daemon
    :after corfu
    :custom
    (kind-icon-default-face 'corfu-default)
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** Embark
#+begin_src emacs-lisp
  (use-package embark
    :bind (("C-c o" . embark-act)
           ("C-."   . embark-act)
           :map minibuffer-local-map
           ("M-o"   . embark-act)
           :map embark-command-map
           ;; Unbind the dangerous `global-set-key' and `local-set-key'
           ;; actions.  It's far too easy to accidentally bind over some
           ;; `self-insert-command' binding or even over
           ;; \\[keyboard-quit].
           ("g" . nil)
           ("l" . nil)))
#+end_src

** Consult
#+begin_src emacs-lisp
  (use-package consult
    :bind (("C-x b" . consult-buffer)
	   ([remap yank-pop] . consult-yank-pop)
	   ([remap goto-line] . consult-goto-line)
	   ("M-g o" . consult-outline)
	   ("M-g i" . consult-imenu)
	   ("M-s r" . consult-ripgrep)
	   ("M-s f" . consult-find)
	   ("M-s l" . consult-line)
	   ("C-x C-r" . consult-recent-file)
	   ;; Isearch integration
	   ("M-s e" . consult-isearch-history)
	   :map isearch-mode-map
	   ("M-e" . consult-isearch-history)
	   ("M-s e" . consult-isearch-history)
	   ("M-s l" . consult-line)
	   ("M-s L" . consult-line-multi)
	   )
    :custom
    (consult-narrow-key "<"))
#+end_src

** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :config
    (setq completion-styles '(orderless)))
#+end_src

** Cape
Cape adds additional entries to some system, used by Corfu.
#+begin_src elisp
  (use-package cape
    :defer
    :init
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    :config
    (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)
    (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify))
#+end_src

* Programming
** Magit
#+begin_src elisp
  (use-package magit
    :if (executable-find "git"))
#+end_src

** Compilation
#+begin_src elisp
  (setq-default compilation-always-kill t)
  (setq-default compilation-ask-about-save t)
  (setq-default compilation-scroll-output t)
#+end_src

** Eglot
Eglot är del av emacs-kärnan nu i version 29.1, så jag behöver inte ladda den.
#+begin_src elisp
    (use-package eglot
      :ensure nil
      :bind (:map eglot-mode-map
		  ("C-c e f n" . flymake-goto-next-error)
		  ("C-c e f p" . flymake-goto-prev-error)
		  ("C-c e r" . eglot-rename)
		  ("C-c e f r" . eglot-format)
		  ("C-c e f b" . eglot-format-buffer)
		  ("C-c e a" . eglot-code-actions))
      :hook
      ((python-mode . eglot-ensure)
       (c-mode . eglot-ensure)
       (c++-mode . eglot-ensure)
       (rust-mode . eglot-ensure)
       (java-mode . eglot-ensure)
       (python-ts-mode . eglot-ensure)
       (c-ts-mode . eglot-ensure)
       (c++-ts-mode . eglot-ensure)
       (rust-ts-mode . eglot-ensure)
       (java-ts-mode . eglot-ensure))
      :custom
      (eglot-autoshutdown t)
      (eglot-send-changes-idle-time 0.1))
#+end_src

** Smartparens
#+begin_src elisp
  (use-package smartparens-config
    :ensure smartparens
    :init
    (setq sp-show-pair-delay 0)
    :custom
    (show-smartparens-global-mode t)
    :hook
    (prog-mode . turn-on-smartparens-mode)
    (markdow-mode . turn-on-smartparens-mode))
#+end_src

** tree-sitter

~tree-sitter~ ger bättre syntax-färgning än regexp-baserad (mer
diversifierad, och snabbare).

#+begin_src emacs-lisp
  (use-package treesit-auto
    :config
    (global-treesit-auto-mode)
    (setq treesit-auto-install 'prompt))
#+end_src
** Combobulate
#+begin_src elisp
  (unless (package-installed-p 'combobulate)
    (package-vc-install '(combobulate :url "https://github.com/mickeynp/combobulate")))
  (use-package combobulate
    :hook ((rust-ts-mode . combobulate-mode)
	   (python-ts-mode . combobulate-mode)
	   (js-ts-mode . combobulate-mode)
	   (css-ts-mode . combobulate-mode)
	   (yaml-ts-mode . combobulate-mode)
	   (typescript-ts-mode . combobulate-mode)
	   (tsx-ts-mode . combobulate-mode))
    :load-path ("elpa/combobulate/"))
#+end_src
** Debugging
#+begin_src elisp
  (use-package dap-mode
    :config
    (dap-auto-configure-mode))
#+end_src
** Project Manager

Replace VC with Magit in ~project.el~.
#+begin_src elisp
  (global-set-key (kbd "C-x p v") 'magit-project-status)

  (require 'project)
  (custom-set-variables
   '(project-switch-commands
     '((project-find-file "Find file")
       (project-find-regexp "Find regexp" ?r)
       (project-find-dir "Find directory")
       (?g "Magit Status" magit-project-status)
       (project-eshell "Eshell")
       (106 "Restore windows" project-x-windows))))
#+end_src

** Common Filetypes
#+begin_src elisp
  (use-package markdown-mode)

  (use-package yaml-mode)

  (use-package json-mode)
#+end_src

** Racket
#+begin_src elisp
  (use-package racket-mode)
#+end_src

#+begin_src elisp
  (unless (package-installed-p 'ob-racket)
    (package-vc-install '(ob-racket :url "https://github.com/hasu/emacs-ob-racket")))
  (use-package ob-racket)
#+end_src

*** Pollen
#+begin_src elisp
  (use-package pollen-mode)
#+end_src

** Scheme
*** Geiser
#+begin_src elisp
  (use-package geiser-racket)
  (add-hook 'scheme-hook-mode 'geiser-mode)
  (setq gieser-default-implementation 'racket)
#+end_src

** Python
*** Debug
#+begin_src elisp
  (use-package dap-python
    :ensure nil
    :custom
    (dap-python-debugger 'debugpy))
#+end_src
*** Jupyter
#+begin_src elisp
(use-package jupyter)
#+end_src

** Haskell
#+begin_src elisp
  (use-package haskell-mode
    :mode ("\\.hs?\\'" . haskell-mode))
#+end_src

** Lua
#+begin_src elisp
  (use-package lua-mode)
#+end_src

* TODO Snippets

- [ ] Jag vill ha mk och dm!

#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :after yasnippet)        

  (use-package aas
    :hook (LaTeX-mode . aas-activate-for-major-mode)
    :hook (org-mode . aas-activate-for-major-mode)
    :config
    (aas-set-snippets 'text-mode
      ;; expand unconditionally
      ";o-" "ō"
      ";i-" "ī"
      ";a-" "ā"
      ";u-" "ū"
      ";e-" "ē")
    (aas-set-snippets 'text-mode
      :cond #'(lambda () (not (texmathp))); Expand only when /not/ in text mode
      "mk" (lambda () (interactive)
             (yas-expand-snippet "\\\\( $1 \\\\)$0"))
      ;; :cond #'(lambda () (and (looking-back "^beg" nil) (not (texmathp))))
      "dm" (lambda () (interactive)
             (yas-expand-snippet "\\begin{equation}\\label{eq:$1}\n$2\n\\end{equation}\n$0"))
      )
    (aas-set-snippets 'latex-mode
      ;; set condition!
      :cond #'texmathp ; expand only while in math
      "supp" "\\supp"
      "On" "O(n)"
      "O1" "O(1)"
      "Olog" "O(\\log n)"
      "Olon" "O(n \\log n)"
      ;; bind to functions!
      "td" (lambda () (interactive)
             (yas-expand-snippet "^{$1}$0"))
      "rd" (lambda () (interactive)
             (yas-expand-snippet "^{($1)}$0"))
      "binom" (lambda () (interactive)
                (yas-expand-snippet "\\binom{$1}{$2}$0"))
      "//" (lambda () (interactive)
             (yas-expand-snippet "\\frac{$1}{$2}$0"))
      "Span" (lambda () (interactive)
               (yas-expand-snippet "\\Span($1)$0")))
    ;; disable snippets by redefining them with a nil expansion
    (aas-set-snippets 'latex-mode
      "supp" nil))
#+end_src

\(  \)
#+begin_src elisp
  (use-package laas
    :hook (LaTeX-mode . laas-mode)
    :hook (org-mode . laas-mode)
    :config ; do whatever here
    (aas-set-snippets 'laas-mode
      ;; set condition!
      :cond #'texmathp ; expand only while in math
      "supp" "\\supp"
      "On" "O(n)"
      "O1" "O(1)"
      "Olog" "O(\\log n)"
      "Olon" "O(n \\log n)"
      ;; bind to functions!
      "Sum" (lambda () (interactive)
              (yas-expand-snippet "\\sum_{$1}^{$2} $0"))
      "Span" (lambda () (interactive)
               (yas-expand-snippet "\\Span($1)$0"))
      ;; add accent snippets
      :cond #'laas-object-on-left-condition
      "qq" (lambda () (interactive) (laas-wrap-previous-object "sqrt"))))
#+end_src

* Terminal
#+begin_src elisp
  (use-package eat)
#+end_src

* Meow
** COMMENT Custom Functions
#+begin_src emacs-lisp
  ;; Fixa så det står reverse-find
  (defun meow-negative-find ()
    (interactive)
    (let ((current-prefix-arg -1))
      (call-interactively 'meow-find)))

  (defun meow-negative-till ()
    (interactive)
    (let ((current-prefix-arg -1))
      (call-interactively 'meow-till)))
#+end_src

** ~meow-setup~ Definition
#+begin_src elisp
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-dvorak)
    (meow-leader-define-key
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-motion-overwrite-define-key
     ;; custom keybinding for motion state
     '("<escape>" . ignore))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("<" . meow-beginning-of-thing)
     '(">" . meow-end-of-thing)
     '("e" . meow-append)
     '("E" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("u" . meow-line)
     '("U" . meow-goto-line)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("a" . meow-insert)
     '("A" . meow-open-above)
     '("j" . meow-join)
     '("k" . meow-kill)
     '("m" . meow-mark-word)
     '("M" . meow-mark-symbol)
     '("n" . meow-next)
     '("N" . meow-next-expand)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-prev)
     '("P" . meow-prev-expand)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-search)
     '("t" . meow-right)
     '("T" . meow-right-expand)
     '("/" . meow-undo)
     '("/" . meow-undo-in-selection)
     '("w" . meow-find)
     '("W" . meow-till)
     '("v" . meow-visit)
     '("f" . meow-next-word)
     '("F" . meow-next-symbol)
     '("x" . meow-save)
     '("X" . meow-sync-grab)
     '("y" . meow-yank)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))
#+end_src

** Loading the Package
#+begin_src emacs-lisp
  (use-package meow
    :custom
    (meow-use-clipboard t)
    (meow-use-cursor-position-hack t)
    (meow-use-enhanced-selection-effect t)
    (meow-keypad-leader-dispatch ctl-x-map)
    (meow-cheatsheet-physical-layout meow-cheatsheet-physical-layout-iso) ; set iso cheatsheet layout
    :config
    (meow-thing-register 'angled '(pair ("<") (">")) '(pair ("<") (">")))
    (add-to-list 'meow-char-thing-table '(?a . angled))
    (meow-setup)
    (meow-global-mode)
    (add-hook 'meow-insert-exit-hook 'corfu-quit)
    (setq-default mode-line-format (cons '((:eval (meow-indicator))) mode-line-format))
    (setq meow-mode-state-list (append meow-mode-state-list '((git-commit-mode . insert)
				  (org-capture-mode . insert)
				  (eshell-mode . insert))))
    ;; :hook
    ;; (org-capture-mode . (lambda () (meow-insert-mode)))
    ;; (git-commit-mode . (lambda () (meow-insert-mode)))
    ;; (eshell-mode . (lambda () (meow-insert-mode))))
    )
#+end_src

I changed ~point-max~ to ~line-end-position~ on line 450 in
=meow-command.el= so append doesn't go to new
line if at end of line, with the position-hack.

[[https://github.com/meow-edit/meow/pull/265][See this issue]] for more information.

Here, I put hairspaces inbetween the letters of the state names, as
there's no letter spacing.
#+begin_src elisp
  (setq meow-replace-state-name-list '(
				       (normal . "N O R M A L")
				       (motion . "M O T I O N")
				       (keypad . "K E Y P A D")
				       (insert . "I N S E R T")
				       (beacon . "B E A C O N")))
    (setq nobreak-char-display nil)
#+end_src

* ~vundo~
  
I know the undo ring is a powerful tool and that it's designed for you
to never lose any information. Right now, with little knowledge on how
to harness its powers, I'll use ~vundo~.

#+begin_src elisp
  (use-package vundo
    :defer t
    :bind
    (("C-x u" . vundo)))
#+end_src

* ~which-key~
#+begin_src elisp
  (use-package which-key
    :diminish
    :config
    (which-key-mode))
#+end_src

* Emojis
#+begin_src elisp
  (use-package emojify
    :hook (after-init . global-emojify-mode))
#+end_src
* Screenshot
#+begin_src elisp
  (unless (package-installed-p 'screenshot)
    (package-vc-install '(screenshot :url "https://github.com/tecosaur/screenshot")))
  (use-package screenshot)
#+end_src
